{"ast":null,"code":"import { jwtDecode } from 'jwt-decode';\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return jwtDecode(this.getToken());\n  }\n  loggedIn() {\n    // check if the user is still logged in\n    const token = this.getToken(); // Checks if there is a saved token and it's still valid\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if the token has expired\n  isTokenExpired(token) {\n    try {\n      const decoded = jwtDecode(token);\n      return decoded.exp < Date.now() / 1000;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // retrieve token from localStorage\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  // set token to localStorage and reload page to homepage\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/dashboard');\n  }\n\n  // clear token from localStorage and force logout with reload\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/logoutmessage');\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["jwtDecode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"sources":["C:/Users/admin/3D Objects/Client/my-app/src/utils/auth.js"],"sourcesContent":["import { jwtDecode } from 'jwt-decode';\r\n\r\nclass AuthService {\r\n  // retrieve data saved in token\r\n  getProfile() {\r\n    return jwtDecode(this.getToken());\r\n  }\r\n\r\n  loggedIn() {\r\n    // check if the user is still logged in\r\n    const token = this.getToken(); // Checks if there is a saved token and it's still valid\r\n    return !!token && !this.isTokenExpired(token);\r\n  }\r\n\r\n  // check if the token has expired\r\n  isTokenExpired(token) {\r\n    try {\r\n      const decoded = jwtDecode(token);\r\n      return decoded.exp < Date.now() / 1000;\r\n    } catch (err) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // retrieve token from localStorage\r\n  getToken() {\r\n    return localStorage.getItem('id_token');\r\n  }\r\n\r\n  // set token to localStorage and reload page to homepage\r\n  login(idToken) {\r\n    localStorage.setItem('id_token', idToken);\r\n    window.location.assign('/dashboard');\r\n  }\r\n\r\n  // clear token from localStorage and force logout with reload\r\n  logout() {\r\n    localStorage.removeItem('id_token');\r\n    window.location.assign('/logoutmessage');\r\n  }\r\n}\r\n\r\nexport default new AuthService();\r\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AAEtC,MAAMC,WAAW,CAAC;EAChB;EACAC,UAAUA,CAAA,EAAG;IACX,OAAOF,SAAS,CAAC,IAAI,CAACG,QAAQ,CAAC,CAAC,CAAC;EACnC;EAEAC,QAAQA,CAAA,EAAG;IACT;IACA,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAO,CAAC,CAACE,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC;EAC/C;;EAEA;EACAC,cAAcA,CAACD,KAAK,EAAE;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,SAAS,CAACK,KAAK,CAAC;MAChC,OAAOE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI;IACxC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO,KAAK;IACd;EACF;;EAEA;EACAR,QAAQA,CAAA,EAAG;IACT,OAAOS,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;;EAEA;EACAC,KAAKA,CAACC,OAAO,EAAE;IACbH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IACzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,YAAY,CAAC;EACtC;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACPR,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;IACnCJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,gBAAgB,CAAC;EAC1C;AACF;AAEA,eAAe,IAAIlB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useReadQuery(queryRef) {\n  var unwrapped = unwrapQueryRef(queryRef);\n  var clientOrObsQuery = useApolloClient(unwrapped ?\n  // passing an `ObservableQuery` is not supported by the types, but it will\n  // return any truthy value that is passed in as an override so we cast the result\n  unwrapped[\"observable\"] : undefined);\n  return wrapHook(\"useReadQuery\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useReadQuery_, clientOrObsQuery)(queryRef);\n}\nfunction useReadQuery_(queryRef) {\n  assertWrappedQueryRef(queryRef);\n  var internalQueryRef = React.useMemo(function () {\n    return unwrapQueryRef(queryRef);\n  }, [queryRef]);\n  var getPromise = React.useCallback(function () {\n    return getWrappedPromise(queryRef);\n  }, [queryRef]);\n  if (internalQueryRef.disposed) {\n    internalQueryRef.reinitialize();\n    updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n  }\n  React.useEffect(function () {\n    return internalQueryRef.retain();\n  }, [internalQueryRef]);\n  var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n    return internalQueryRef.listen(function (promise) {\n      updateWrappedQueryRef(queryRef, promise);\n      forceUpdate();\n    });\n  }, [internalQueryRef, queryRef]), getPromise, getPromise);\n  var result = __use(promise);\n  return React.useMemo(function () {\n    return {\n      data: result.data,\n      networkStatus: result.networkStatus,\n      error: toApolloError(result)\n    };\n  }, [result]);\n}","map":{"version":3,"names":["React","assertWrappedQueryRef","getWrappedPromise","unwrapQueryRef","updateWrappedQueryRef","__use","wrapHook","toApolloError","useSyncExternalStore","useApolloClient","useReadQuery","queryRef","unwrapped","clientOrObsQuery","undefined","useReadQuery_","internalQueryRef","useMemo","getPromise","useCallback","disposed","reinitialize","promise","useEffect","retain","forceUpdate","listen","result","data","networkStatus","error"],"sources":["C:/Users/admin/3D Objects/Frontend/my-app/node_modules/@apollo/client/react/hooks/useReadQuery.js"],"sourcesContent":["import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, } from \"../internal/index.js\";\nimport { __use, wrapHook } from \"./internal/index.js\";\nimport { toApolloError } from \"./useSuspenseQuery.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nexport function useReadQuery(queryRef) {\n    var unwrapped = unwrapQueryRef(queryRef);\n    var clientOrObsQuery = useApolloClient(unwrapped ?\n        // passing an `ObservableQuery` is not supported by the types, but it will\n        // return any truthy value that is passed in as an override so we cast the result\n        unwrapped[\"observable\"]\n        : undefined);\n    return wrapHook(\"useReadQuery\", \n    // eslint-disable-next-line react-compiler/react-compiler\n    useReadQuery_, clientOrObsQuery)(queryRef);\n}\nfunction useReadQuery_(queryRef) {\n    assertWrappedQueryRef(queryRef);\n    var internalQueryRef = React.useMemo(function () { return unwrapQueryRef(queryRef); }, [queryRef]);\n    var getPromise = React.useCallback(function () { return getWrappedPromise(queryRef); }, [queryRef]);\n    if (internalQueryRef.disposed) {\n        internalQueryRef.reinitialize();\n        updateWrappedQueryRef(queryRef, internalQueryRef.promise);\n    }\n    React.useEffect(function () { return internalQueryRef.retain(); }, [internalQueryRef]);\n    var promise = useSyncExternalStore(React.useCallback(function (forceUpdate) {\n        return internalQueryRef.listen(function (promise) {\n            updateWrappedQueryRef(queryRef, promise);\n            forceUpdate();\n        });\n    }, [internalQueryRef, queryRef]), getPromise, getPromise);\n    var result = __use(promise);\n    return React.useMemo(function () {\n        return {\n            data: result.data,\n            networkStatus: result.networkStatus,\n            error: toApolloError(result),\n        };\n    }, [result]);\n}\n//# sourceMappingURL=useReadQuery.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SAASC,qBAAqB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,qBAAqB,QAAS,sBAAsB;AACvH,SAASC,KAAK,EAAEC,QAAQ,QAAQ,qBAAqB;AACrD,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,eAAe,QAAQ,sBAAsB;AACtD,OAAO,SAASC,YAAYA,CAACC,QAAQ,EAAE;EACnC,IAAIC,SAAS,GAAGT,cAAc,CAACQ,QAAQ,CAAC;EACxC,IAAIE,gBAAgB,GAAGJ,eAAe,CAACG,SAAS;EAC5C;EACA;EACAA,SAAS,CAAC,YAAY,CAAC,GACrBE,SAAS,CAAC;EAChB,OAAOR,QAAQ,CAAC,cAAc;EAC9B;EACAS,aAAa,EAAEF,gBAAgB,CAAC,CAACF,QAAQ,CAAC;AAC9C;AACA,SAASI,aAAaA,CAACJ,QAAQ,EAAE;EAC7BV,qBAAqB,CAACU,QAAQ,CAAC;EAC/B,IAAIK,gBAAgB,GAAGhB,KAAK,CAACiB,OAAO,CAAC,YAAY;IAAE,OAAOd,cAAc,CAACQ,QAAQ,CAAC;EAAE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAClG,IAAIO,UAAU,GAAGlB,KAAK,CAACmB,WAAW,CAAC,YAAY;IAAE,OAAOjB,iBAAiB,CAACS,QAAQ,CAAC;EAAE,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EACnG,IAAIK,gBAAgB,CAACI,QAAQ,EAAE;IAC3BJ,gBAAgB,CAACK,YAAY,CAAC,CAAC;IAC/BjB,qBAAqB,CAACO,QAAQ,EAAEK,gBAAgB,CAACM,OAAO,CAAC;EAC7D;EACAtB,KAAK,CAACuB,SAAS,CAAC,YAAY;IAAE,OAAOP,gBAAgB,CAACQ,MAAM,CAAC,CAAC;EAAE,CAAC,EAAE,CAACR,gBAAgB,CAAC,CAAC;EACtF,IAAIM,OAAO,GAAGd,oBAAoB,CAACR,KAAK,CAACmB,WAAW,CAAC,UAAUM,WAAW,EAAE;IACxE,OAAOT,gBAAgB,CAACU,MAAM,CAAC,UAAUJ,OAAO,EAAE;MAC9ClB,qBAAqB,CAACO,QAAQ,EAAEW,OAAO,CAAC;MACxCG,WAAW,CAAC,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,EAAE,CAACT,gBAAgB,EAAEL,QAAQ,CAAC,CAAC,EAAEO,UAAU,EAAEA,UAAU,CAAC;EACzD,IAAIS,MAAM,GAAGtB,KAAK,CAACiB,OAAO,CAAC;EAC3B,OAAOtB,KAAK,CAACiB,OAAO,CAAC,YAAY;IAC7B,OAAO;MACHW,IAAI,EAAED,MAAM,CAACC,IAAI;MACjBC,aAAa,EAAEF,MAAM,CAACE,aAAa;MACnCC,KAAK,EAAEvB,aAAa,CAACoB,MAAM;IAC/B,CAAC;EACL,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef } from \"../internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers(queryRef) {\n  var unwrapped = unwrapQueryRef(queryRef);\n  var clientOrObsQuery = useApolloClient(unwrapped ?\n  // passing an `ObservableQuery` is not supported by the types, but it will\n  // return any truthy value that is passed in as an override so we cast the result\n  unwrapped[\"observable\"] : undefined);\n  return wrapHook(\"useQueryRefHandlers\",\n  // eslint-disable-next-line react-compiler/react-compiler\n  useQueryRefHandlers_, clientOrObsQuery)(queryRef);\n}\nfunction useQueryRefHandlers_(queryRef) {\n  assertWrappedQueryRef(queryRef);\n  var _a = React.useState(queryRef),\n    previousQueryRef = _a[0],\n    setPreviousQueryRef = _a[1];\n  var _b = React.useState(queryRef),\n    wrappedQueryRef = _b[0],\n    setWrappedQueryRef = _b[1];\n  var internalQueryRef = unwrapQueryRef(queryRef);\n  // To ensure we can support React transitions, this hook needs to manage the\n  // queryRef state and apply React's state value immediately to the existing\n  // queryRef since this hook doesn't return the queryRef directly\n  if (previousQueryRef !== queryRef) {\n    setPreviousQueryRef(queryRef);\n    setWrappedQueryRef(queryRef);\n  } else {\n    updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n  }\n  var refetch = React.useCallback(function (variables) {\n    var promise = internalQueryRef.refetch(variables);\n    setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = internalQueryRef.fetchMore(options);\n    setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n    return promise;\n  }, [internalQueryRef]);\n  return {\n    refetch: refetch,\n    fetchMore: fetchMore,\n    subscribeToMore: internalQueryRef.observable.subscribeToMore\n  };\n}","map":{"version":3,"names":["React","assertWrappedQueryRef","getWrappedPromise","unwrapQueryRef","updateWrappedQueryRef","wrapQueryRef","useApolloClient","wrapHook","useQueryRefHandlers","queryRef","unwrapped","clientOrObsQuery","undefined","useQueryRefHandlers_","_a","useState","previousQueryRef","setPreviousQueryRef","_b","wrappedQueryRef","setWrappedQueryRef","internalQueryRef","refetch","useCallback","variables","promise","fetchMore","options","subscribeToMore","observable"],"sources":["C:/Users/admin/3D Objects/Frontend/my-app/node_modules/@apollo/client/react/hooks/useQueryRefHandlers.js"],"sourcesContent":["import * as React from \"rehackt\";\nimport { assertWrappedQueryRef, getWrappedPromise, unwrapQueryRef, updateWrappedQueryRef, wrapQueryRef, } from \"../internal/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { wrapHook } from \"./internal/index.js\";\n/**\n * A React hook that returns a `refetch` and `fetchMore` function for a given\n * `queryRef`.\n *\n * This is useful to get access to handlers for a `queryRef` that was created by\n * `createQueryPreloader` or when the handlers for a `queryRef` produced in\n * a different component are inaccessible.\n *\n * @example\n * ```tsx\n * const MyComponent({ queryRef }) {\n *   const { refetch, fetchMore } = useQueryRefHandlers(queryRef);\n *\n *   // ...\n * }\n * ```\n * @since 3.9.0\n * @param queryRef - A `QueryRef` returned from `useBackgroundQuery`, `useLoadableQuery`, or `createQueryPreloader`.\n */\nexport function useQueryRefHandlers(queryRef) {\n    var unwrapped = unwrapQueryRef(queryRef);\n    var clientOrObsQuery = useApolloClient(unwrapped ?\n        // passing an `ObservableQuery` is not supported by the types, but it will\n        // return any truthy value that is passed in as an override so we cast the result\n        unwrapped[\"observable\"]\n        : undefined);\n    return wrapHook(\"useQueryRefHandlers\", \n    // eslint-disable-next-line react-compiler/react-compiler\n    useQueryRefHandlers_, clientOrObsQuery)(queryRef);\n}\nfunction useQueryRefHandlers_(queryRef) {\n    assertWrappedQueryRef(queryRef);\n    var _a = React.useState(queryRef), previousQueryRef = _a[0], setPreviousQueryRef = _a[1];\n    var _b = React.useState(queryRef), wrappedQueryRef = _b[0], setWrappedQueryRef = _b[1];\n    var internalQueryRef = unwrapQueryRef(queryRef);\n    // To ensure we can support React transitions, this hook needs to manage the\n    // queryRef state and apply React's state value immediately to the existing\n    // queryRef since this hook doesn't return the queryRef directly\n    if (previousQueryRef !== queryRef) {\n        setPreviousQueryRef(queryRef);\n        setWrappedQueryRef(queryRef);\n    }\n    else {\n        updateWrappedQueryRef(queryRef, getWrappedPromise(wrappedQueryRef));\n    }\n    var refetch = React.useCallback(function (variables) {\n        var promise = internalQueryRef.refetch(variables);\n        setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    var fetchMore = React.useCallback(function (options) {\n        var promise = internalQueryRef.fetchMore(options);\n        setWrappedQueryRef(wrapQueryRef(internalQueryRef));\n        return promise;\n    }, [internalQueryRef]);\n    return {\n        refetch: refetch,\n        fetchMore: fetchMore,\n        subscribeToMore: internalQueryRef.observable.subscribeToMore,\n    };\n}\n//# sourceMappingURL=useQueryRefHandlers.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SAASC,qBAAqB,EAAEC,iBAAiB,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,QAAS,sBAAsB;AACrI,SAASC,eAAe,QAAQ,sBAAsB;AACtD,SAASC,QAAQ,QAAQ,qBAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAmBA,CAACC,QAAQ,EAAE;EAC1C,IAAIC,SAAS,GAAGP,cAAc,CAACM,QAAQ,CAAC;EACxC,IAAIE,gBAAgB,GAAGL,eAAe,CAACI,SAAS;EAC5C;EACA;EACAA,SAAS,CAAC,YAAY,CAAC,GACrBE,SAAS,CAAC;EAChB,OAAOL,QAAQ,CAAC,qBAAqB;EACrC;EACAM,oBAAoB,EAAEF,gBAAgB,CAAC,CAACF,QAAQ,CAAC;AACrD;AACA,SAASI,oBAAoBA,CAACJ,QAAQ,EAAE;EACpCR,qBAAqB,CAACQ,QAAQ,CAAC;EAC/B,IAAIK,EAAE,GAAGd,KAAK,CAACe,QAAQ,CAACN,QAAQ,CAAC;IAAEO,gBAAgB,GAAGF,EAAE,CAAC,CAAC,CAAC;IAAEG,mBAAmB,GAAGH,EAAE,CAAC,CAAC,CAAC;EACxF,IAAII,EAAE,GAAGlB,KAAK,CAACe,QAAQ,CAACN,QAAQ,CAAC;IAAEU,eAAe,GAAGD,EAAE,CAAC,CAAC,CAAC;IAAEE,kBAAkB,GAAGF,EAAE,CAAC,CAAC,CAAC;EACtF,IAAIG,gBAAgB,GAAGlB,cAAc,CAACM,QAAQ,CAAC;EAC/C;EACA;EACA;EACA,IAAIO,gBAAgB,KAAKP,QAAQ,EAAE;IAC/BQ,mBAAmB,CAACR,QAAQ,CAAC;IAC7BW,kBAAkB,CAACX,QAAQ,CAAC;EAChC,CAAC,MACI;IACDL,qBAAqB,CAACK,QAAQ,EAAEP,iBAAiB,CAACiB,eAAe,CAAC,CAAC;EACvE;EACA,IAAIG,OAAO,GAAGtB,KAAK,CAACuB,WAAW,CAAC,UAAUC,SAAS,EAAE;IACjD,IAAIC,OAAO,GAAGJ,gBAAgB,CAACC,OAAO,CAACE,SAAS,CAAC;IACjDJ,kBAAkB,CAACf,YAAY,CAACgB,gBAAgB,CAAC,CAAC;IAClD,OAAOI,OAAO;EAClB,CAAC,EAAE,CAACJ,gBAAgB,CAAC,CAAC;EACtB,IAAIK,SAAS,GAAG1B,KAAK,CAACuB,WAAW,CAAC,UAAUI,OAAO,EAAE;IACjD,IAAIF,OAAO,GAAGJ,gBAAgB,CAACK,SAAS,CAACC,OAAO,CAAC;IACjDP,kBAAkB,CAACf,YAAY,CAACgB,gBAAgB,CAAC,CAAC;IAClD,OAAOI,OAAO;EAClB,CAAC,EAAE,CAACJ,gBAAgB,CAAC,CAAC;EACtB,OAAO;IACHC,OAAO,EAAEA,OAAO;IAChBI,SAAS,EAAEA,SAAS;IACpBE,eAAe,EAAEP,gBAAgB,CAACQ,UAAU,CAACD;EACjD,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}